Что такое SOLID? 
"SOLID" - это аббревиатура, представляющая собой первые буквы пяти основных принципов объектно-ориентированного  
программирования и проектирования. Эти принципы помогают разработчикам создавать гибкие, поддерживаемые и масштабируемые  
программные системы. SOLID был представлен Робертом Мартином и Майклом Фезерсом как мнемоническое устройство для  
запоминания этих принципов. 
● Принцип единственной ответственности (Single Responsibility Principle - SRP): Каждый класс должен иметь только одну причину  
для изменения. Это означает, что класс должен быть ответственен только за одну четко определенную функциональность или  
задачу. 
● Принцип открытости/закрытости (Open/Closed Principle - OCP): Сущности программы должны быть открыты для расширения, но  
закрыты для изменения. Это можно достичь путем использования абстракций, интерфейсов и наследования, чтобы изменять  
поведение программы без изменения исходного кода. 
● Принцип подстановки Барбары Лисков (Liskov Substitution Principle - LSP): Объекты базовых классов должны быть заменяемыми  
своими подклассами без нарушения корректности программы. То есть, код, использующий базовый класс, должен корректно  
работать с любым его подклассом, не зная об этом. 
● Принцип разделения интерфейса (Interface Segregation Principle - ISP): Много специализированных интерфейсов лучше, чем один  
универсальный. Клиенты не должны зависеть от интерфейсов, которые они не используют, и классы должны предоставлять  
только те методы, которые требуются клиентам. 
● Принцип инверсии зависимостей (Dependency Inversion Principle - DIP): Зависимости должны строиться на абстракциях, а не на  
конкретных реализациях. Высокоуровневые модули не должны зависеть от низкоуровневых модулей, а оба типа модулей  
должны зависеть от абстракций. 
